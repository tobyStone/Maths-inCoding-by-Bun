<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maths inCoding</title>
    <link rel="icon" type="image/png" href="/public/images/linux_site_logo.png" sizes="32x32">
    <link href="/../public/style.css" rel="stylesheet">
    <link href="/../public/VideoPlayer.css" rel="stylesheet">
</head>
<body>
    <main>
        <header class="SiteHeader">
        <h1>Maths inCoding<img style = "float: right;" width="120" height = "120" src="\public\images\linux_site_logo.PNG" alt="Pi with numbers">
	</h1>
        <div id="missionStatement">
            <h3>... learning maths through coding computer games</h3>
        </div>
    </header>
    <% if (videoData && videoData.length > 0) { %>
        <div class="video-container" id="video-container">
            <video controls class="video" id="video" preload="auto" poster="<%= videoData[0].imgSrc %>">
                <source src="<%= videoData[0].video %>" type="video/mp4">
            </video>

            <div class="video-controls" id="video-controls">
                <button id="play-pause-btn">Play</button>
                <input type="range" id="volume-control" min="0" max="1" step="0.1">
                <input type="range" id="seek-bar" min="0" value="0">
                <span id="current-time">00:00</span> / <span id="total-duration">00:00</span>
            </div>
        </div>
        </main>
        <script>
           document.addEventListener('DOMContentLoaded', (event) => {
                const video = document.getElementById('video');
                const videoData = JSON.parse('<%- JSON.stringify(videoData[0]) %>');


                video.addEventListener('timeupdate', function () {
                    const questionsAnswered = localStorage.getItem(`questionsAnswered`);
                    if (video.currentTime >= videoData.time_stop_1 && !questionsAnswered) {
                        video.pause();
                        window.location.href = videoData.link_questions_1;
                    }
                });

                const params = new URLSearchParams(window.location.search);
                const startTime = params.get('t');
                if (startTime) {
                    video.currentTime = parseFloat(startTime);
                }

                localStorage.setItem("previousVideoURL", window.location.pathname);
                localStorage.setItem("previousVideoTimestamp", videoData.time_stop_1);
            });

            const playButton = document.getElementById('play-pause-btn');
            const volumeControl = document.getElementById('volume-control');
            const seekBar = document.getElementById('seek-bar');
            const currentTimeDisplay = document.getElementById('current-time');
            const totalDurationDisplay = document.getElementById('total-duration');

            playButton.addEventListener('click', togglePlay);
            volumeControl.addEventListener('input', updateVolume);
            seekBar.addEventListener('input', seekVideo);

            function togglePlay() {
                if (video.paused || video.ended) {
                    video.play();
                    playButton.textContent = 'Pause';
                } else {
                    video.pause();
                    playButton.textContent = 'Play';
                }
            }

            function updateVolume() {
                video.volume = volumeControl.value;
            }

            function seekVideo() {
                video.currentTime = (seekBar.value / 100) * video.duration;
            }

            video.addEventListener('loadedmetadata', () => {
                seekBar.max = video.duration;
                totalDurationDisplay.textContent = formatTime(video.duration);
            });

            video.addEventListener('timeupdate', () => {
                seekBar.value = video.currentTime;
                currentTimeDisplay.textContent = formatTime(video.currentTime);
            });
 
             /**
             * Formats a number of seconds into a time string in 'minutes:seconds' format.
             * @param {number} seconds - The number of seconds to format.
             * @returns {string} The formatted time string.
             */
             function formatTime(seconds) {
                const minutes = Math.floor(seconds / 60);
                seconds = Math.floor(seconds % 60);
                return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
            }
        </script>
    <% } %>
</body>
</html>